# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
    build_and_test:
        docker:
        # specify the version you desire here
        - image: circleci/node:8.11.4
        
        # Specify service dependencies here if necessary
        # CircleCI maintains a library of pre-built images
        # documented at https://circleci.com/docs/2.0/circleci-images/
        # - image: circleci/mongo:3.4.4

        working_directory: ~/repo

        steps:
        - checkout

        # Download and cache dependencies
        - restore_cache:
            keys:
                - v1-dependencies-{{ checksum "client/package.json" }}
                - v1-dependencies-

        - restore_cache:
            keys:
                - v1-dependencies-{{ checksum "server/package.json" }}
                - v1-dependencies-

        # Build client
        - run:
            command: pwd && yarn install
            working_directory: client

        - run:
            command: pwd && yarn install
            working_directory: server

        - run: yarn install

        - save_cache:
            key: v1-dependencies-{{ checksum "client/package.json" }}
            paths:
                - client/node_modules

        - save_cache:
            key: v1-dependencies-{{ checksum "server/package.json" }}
            paths:
                - server/node_modules
            
        # run tests!
        - run: 
            command: yarn test
            working_directory: client

        - run: 
            command: yarn test
            working_directory: server
    
    staging:
        docker:
            - image: google/cloud-sdk
        environment:
            - GOOGLE_PROJECT_ID: "aria-nnmta"
            - GOOGLE_COMPUTE_ZONE: "us-central1-b"
            - GOOGLE_CLUSTER_NAME: "cluster-1"
        steps:
            - checkout
            - run:
                name: Setup SDK
                command: |
                    echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
                    gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
                    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
                    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                    gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            - setup_remote_docker
            - run:
                name: Docker build client
                command: |
                    docker build -t aria-client .
                    docker tag ${PROJECT_NAME} gcr.io/${GOOGLE_PROJECT_ID}/aria-client:${CIRCLE_SHA1}
                    gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
                    docker push gcr.io/${GOOGLE_PROJECT_ID}/aria-client:${CIRCLE_SHA1}
                working_directory: client
            - run:
                name: Docker build server 
                command: |
                    docker build -t aria-server .
                    docker tag ${PROJECT_NAME} gcr.io/${GOOGLE_PROJECT_ID}/aria-server:${CIRCLE_SHA1}
                    gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
                    docker push gcr.io/${GOOGLE_PROJECT_ID}/aria-server:${CIRCLE_SHA1}
                working_directory: server 
            - run:
                name: Deploy to GKE
                command: |
                    kubectl apply -f ${HOME}/res/aria-server.yml
                    kubectl apply -f ${HOME}/res/aria-client.yml
                    kubectl apply -f ${HOME}/res/aria-ingress.yml
                    kubectl rollout status deployment/${PROJECT_NAME}
workflows:
    version: 2
    build_test_deploy:
        jobs:
            - build_and_test
            - staging:
                requires:
                    - build_and_test
                filters:
                    branches:
                        only: master